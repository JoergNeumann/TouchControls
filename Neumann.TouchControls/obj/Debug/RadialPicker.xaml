<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                    xmlns:local="using:Neumann.TouchControls">

    <Color x:Key="RadialPicker_BackgroundColor">White</Color>
    <Color x:Key="RadialPicker_MouseOverBackgroundColor">White</Color>
    <SolidColorBrush x:Key="RadialPicker_BorderBrush" Color="#FFD8ACD0"/>
    <SolidColorBrush x:Key="RadialPicker_BackgroundBrush" Color="White"/>
    <SolidColorBrush x:Key="RadialPicker_IndicatorBrush" Color="#FF80397B"/>

    <Style TargetType="local:RadialPicker">
        <Setter Property="Background" Value="{StaticResource RadialPicker_BackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource RadialPicker_BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:RadialPicker">
                    <Grid x:Name="PART_LayoutRoot" Opacity="0" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <RotateTransform Angle="300"/>
                        </Grid.RenderTransform>

                        <Ellipse x:Name="OuterFrame"
				                Stretch="Uniform" Opacity="1"
                                Fill="{TemplateBinding Background}"
                                StrokeThickness="0"
                                RenderTransformOrigin="0.5,0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform ScaleX="1.8" ScaleY="1.8"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <Ellipse x:Name="PART_OuterCircle" RenderTransformOrigin="0.5,0.5"
                                 Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding Foreground}"
                                 StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <ScaleTransform ScaleX="1.2" ScaleY="1.2"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        
                        <Ellipse x:Name="PART_InnerCircle" RenderTransformOrigin="0.5,0.5" IsHitTestVisible="True"
                                 Stroke="{TemplateBinding Foreground}"
                                 StrokeThickness="2">
                            <Ellipse.Fill>
                                <SolidColorBrush x:Name="InnerCircleFill" Color="{StaticResource RadialPicker_BackgroundColor}"/>
                            </Ellipse.Fill>
                        </Ellipse>

                        <local:Arc x:Name="PART_Indicator" Opacity="1"
                                   StartAngle="{TemplateBinding StartAngle}"
                                   EndAngle="{TemplateBinding EndAngle}"
                                   Stroke="{StaticResource RadialPicker_IndicatorBrush}"
                                   StrokeThickness="2"
                                   RenderTransformOrigin="0.5,0.5"/>

                        <Line x:Name="PART_ValueLine" X1="0" Y1="-100" X2="0" Y2="0" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                              Stroke="{StaticResource RadialPicker_IndicatorBrush}" StrokeThickness="2">
                            <Line.RenderTransform>
                                <RotateTransform Angle="0"/>
                            </Line.RenderTransform>
                        </Line>

                        <Line x:Name="PART_IndicatorLine" X1="0" Y1="-100" X2="0" Y2="0" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                              Stroke="{StaticResource RadialPicker_BorderBrush}" StrokeThickness="2"/>

                        <local:RadialImageButton x:Name="PART_CenterButton" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                 ImageSource="/Neumann.TouchControls/Images/Back.png"/>

                        <Ellipse x:Name="PART_OuterArc"
				                Stretch="Uniform" Opacity="1"
                                Stroke="#FFF1DAEA"
                                StrokeThickness="15"
                                RenderTransformOrigin="0.5,0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform ScaleX="1.8" ScaleY="1.8"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <Grid x:Name="PART_PointsPanel" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"/>
                        <Grid x:Name="PART_LabelsPanel" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"/>

                        <ToolTip x:Name="PART_ToolTip" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value}"
                                 Background="White" BorderBrush="#FF808080" BorderThickness="2"
                                 VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="Common">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Opened">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_LayoutRoot"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="360" Duration="0:0:0.2" EnableDependentAnimation="True">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="PART_LayoutRoot"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0:0:0.2" EnableDependentAnimation="True">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutRoot"
                                                                       Storyboard.TargetProperty="IsHitTestVisible"
                                                                       Duration="0:0:0" EnableDependentAnimation="True">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <x:Boolean>true</x:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="PART_LayoutRoot"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                             To="300" Duration="0:0:0.2" EnableDependentAnimation="True">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                            <DoubleAnimation Storyboard.TargetName="PART_LayoutRoot"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="0" Duration="0:0:0.2" EnableDependentAnimation="True">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutRoot"
                                                                           Storyboard.TargetProperty="IsHitTestVisible"
                                                                           Duration="0:0:0" EnableDependentAnimation="True">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <x:Boolean>false</x:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_InnerCircle"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.5" Duration="0:0:0" EnableDependentAnimation="True"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_InnerCircle"
                                                                        Storyboard.TargetProperty="IsHitTestVisible"
                                                                        Duration="0:0:0" EnableDependentAnimation="True">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <x:Boolean>false</x:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="Mouse">
                                <VisualState x:Name="MouseEnter">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="InnerCircleFill"
                                                        Storyboard.TargetProperty="Color" EnableDependentAnimation="True"
                                                        To="{StaticResource RadialPicker_MouseOverBackgroundColor}" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseLeave">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="InnerCircleFill"
                                                        Storyboard.TargetProperty="Color" EnableDependentAnimation="True"
                                                        To="{StaticResource RadialPicker_BackgroundColor}" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
