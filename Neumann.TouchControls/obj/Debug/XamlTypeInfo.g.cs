//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[53];
            _typeNameTable[0] = "Neumann.TouchControls.Arc";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Double";
            _typeNameTable[3] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[4] = "Neumann.TouchControls.BreadcrumbBullet";
            _typeNameTable[5] = "Boolean";
            _typeNameTable[6] = "Int32";
            _typeNameTable[7] = "Neumann.TouchControls.BreadcrumbBulletBar";
            _typeNameTable[8] = "Neumann.TouchControls.ColumnView";
            _typeNameTable[9] = "Neumann.TouchControls.ColumnViewSectionCollection";
            _typeNameTable[10] = "System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.ColumnViewSection>";
            _typeNameTable[11] = "Object";
            _typeNameTable[12] = "Neumann.TouchControls.ColumnViewSection";
            _typeNameTable[13] = "Neumann.TouchControls.HeaderedContentControl";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[15] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[16] = "Neumann.TouchControls.FanControl";
            _typeNameTable[17] = "Windows.UI.Xaml.Style";
            _typeNameTable[18] = "System.Windows.Input.ICommand";
            _typeNameTable[19] = "Neumann.TouchControls.DisplayMode";
            _typeNameTable[20] = "System.Enum";
            _typeNameTable[21] = "System.ValueType";
            _typeNameTable[22] = "Neumann.TouchControls.PieSlice";
            _typeNameTable[23] = "Windows.UI.Xaml.Shapes.Path";
            _typeNameTable[24] = "Neumann.TouchControls.FanSelector";
            _typeNameTable[25] = "Neumann.TouchControls.FanCollection";
            _typeNameTable[26] = "System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.FanControl>";
            _typeNameTable[27] = "System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.FanControl>";
            _typeNameTable[28] = "Neumann.TouchControls.NumberPad";
            _typeNameTable[29] = "String";
            _typeNameTable[30] = "Windows.UI.Color";
            _typeNameTable[31] = "Byte";
            _typeNameTable[32] = "Neumann.TouchControls.RadialImageButton";
            _typeNameTable[33] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[34] = "Neumann.TouchControls.RadialMenu";
            _typeNameTable[35] = "Neumann.TouchControls.RadialMenuItemCollection";
            _typeNameTable[36] = "System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.RadialMenuItem>";
            _typeNameTable[37] = "Neumann.TouchControls.RadialMenuItem";
            _typeNameTable[38] = "Neumann.TouchControls.RadialMenuExtensionButton";
            _typeNameTable[39] = "Neumann.TouchControls.RadialPicker";
            _typeNameTable[40] = "Neumann.TouchControls.RadialPresenter";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[42] = "Neumann.TouchControls.Topic";
            _typeNameTable[43] = "Neumann.TouchControls.TopicCollection";
            _typeNameTable[44] = "System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.Topic>";
            _typeNameTable[45] = "System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.Topic>";
            _typeNameTable[46] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[47] = "Neumann.TouchControls.CircleItemsPanel";
            _typeNameTable[48] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[49] = "Neumann.TouchControls.RadialPresenterItem";
            _typeNameTable[50] = "Windows.UI.Xaml.Media.PathGeometry";
            _typeNameTable[51] = "Neumann.TouchControls.RangeSlider";
            _typeNameTable[52] = "Neumann.TouchControls.Spinner";

            _typeTable = new global::System.Type[53];
            _typeTable[0] = typeof(global::Neumann.TouchControls.Arc);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::System.Double);
            _typeTable[3] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[4] = typeof(global::Neumann.TouchControls.BreadcrumbBullet);
            _typeTable[5] = typeof(global::System.Boolean);
            _typeTable[6] = typeof(global::System.Int32);
            _typeTable[7] = typeof(global::Neumann.TouchControls.BreadcrumbBulletBar);
            _typeTable[8] = typeof(global::Neumann.TouchControls.ColumnView);
            _typeTable[9] = typeof(global::Neumann.TouchControls.ColumnViewSectionCollection);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.ColumnViewSection>);
            _typeTable[11] = typeof(global::System.Object);
            _typeTable[12] = typeof(global::Neumann.TouchControls.ColumnViewSection);
            _typeTable[13] = typeof(global::Neumann.TouchControls.HeaderedContentControl);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[16] = typeof(global::Neumann.TouchControls.FanControl);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[18] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[19] = typeof(global::Neumann.TouchControls.DisplayMode);
            _typeTable[20] = typeof(global::System.Enum);
            _typeTable[21] = typeof(global::System.ValueType);
            _typeTable[22] = typeof(global::Neumann.TouchControls.PieSlice);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Shapes.Path);
            _typeTable[24] = typeof(global::Neumann.TouchControls.FanSelector);
            _typeTable[25] = typeof(global::Neumann.TouchControls.FanCollection);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Neumann.TouchControls.FanControl>);
            _typeTable[27] = typeof(global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.FanControl>);
            _typeTable[28] = typeof(global::Neumann.TouchControls.NumberPad);
            _typeTable[29] = typeof(global::System.String);
            _typeTable[30] = typeof(global::Windows.UI.Color);
            _typeTable[31] = typeof(global::System.Byte);
            _typeTable[32] = typeof(global::Neumann.TouchControls.RadialImageButton);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[34] = typeof(global::Neumann.TouchControls.RadialMenu);
            _typeTable[35] = typeof(global::Neumann.TouchControls.RadialMenuItemCollection);
            _typeTable[36] = typeof(global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.RadialMenuItem>);
            _typeTable[37] = typeof(global::Neumann.TouchControls.RadialMenuItem);
            _typeTable[38] = typeof(global::Neumann.TouchControls.RadialMenuExtensionButton);
            _typeTable[39] = typeof(global::Neumann.TouchControls.RadialPicker);
            _typeTable[40] = typeof(global::Neumann.TouchControls.RadialPresenter);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[42] = typeof(global::Neumann.TouchControls.Topic);
            _typeTable[43] = typeof(global::Neumann.TouchControls.TopicCollection);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Neumann.TouchControls.Topic>);
            _typeTable[45] = typeof(global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.Topic>);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[47] = typeof(global::Neumann.TouchControls.CircleItemsPanel);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[49] = typeof(global::Neumann.TouchControls.RadialPresenterItem);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Media.PathGeometry);
            _typeTable[51] = typeof(global::Neumann.TouchControls.RangeSlider);
            _typeTable[52] = typeof(global::Neumann.TouchControls.Spinner);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Arc() { return new global::Neumann.TouchControls.Arc(); }
        private object Activate_4_BreadcrumbBullet() { return new global::Neumann.TouchControls.BreadcrumbBullet(); }
        private object Activate_7_BreadcrumbBulletBar() { return new global::Neumann.TouchControls.BreadcrumbBulletBar(); }
        private object Activate_8_ColumnView() { return new global::Neumann.TouchControls.ColumnView(); }
        private object Activate_9_ColumnViewSectionCollection() { return new global::Neumann.TouchControls.ColumnViewSectionCollection(); }
        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.ColumnViewSection>(); }
        private object Activate_12_ColumnViewSection() { return new global::Neumann.TouchControls.ColumnViewSection(); }
        private object Activate_13_HeaderedContentControl() { return new global::Neumann.TouchControls.HeaderedContentControl(); }
        private object Activate_16_FanControl() { return new global::Neumann.TouchControls.FanControl(); }
        private object Activate_22_PieSlice() { return new global::Neumann.TouchControls.PieSlice(); }
        private object Activate_24_FanSelector() { return new global::Neumann.TouchControls.FanSelector(); }
        private object Activate_25_FanCollection() { return new global::Neumann.TouchControls.FanCollection(); }
        private object Activate_26_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Neumann.TouchControls.FanControl>(); }
        private object Activate_27_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.FanControl>(); }
        private object Activate_28_NumberPad() { return new global::Neumann.TouchControls.NumberPad(); }
        private object Activate_32_RadialImageButton() { return new global::Neumann.TouchControls.RadialImageButton(); }
        private object Activate_34_RadialMenu() { return new global::Neumann.TouchControls.RadialMenu(); }
        private object Activate_35_RadialMenuItemCollection() { return new global::Neumann.TouchControls.RadialMenuItemCollection(); }
        private object Activate_36_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.RadialMenuItem>(); }
        private object Activate_37_RadialMenuItem() { return new global::Neumann.TouchControls.RadialMenuItem(); }
        private object Activate_38_RadialMenuExtensionButton() { return new global::Neumann.TouchControls.RadialMenuExtensionButton(); }
        private object Activate_39_RadialPicker() { return new global::Neumann.TouchControls.RadialPicker(); }
        private object Activate_40_RadialPresenter() { return new global::Neumann.TouchControls.RadialPresenter(); }
        private object Activate_42_Topic() { return new global::Neumann.TouchControls.Topic(); }
        private object Activate_43_TopicCollection() { return new global::Neumann.TouchControls.TopicCollection(); }
        private object Activate_44_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Neumann.TouchControls.Topic>(); }
        private object Activate_45_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Neumann.TouchControls.Topic>(); }
        private object Activate_47_CircleItemsPanel() { return new global::Neumann.TouchControls.CircleItemsPanel(); }
        private object Activate_49_RadialPresenterItem() { return new global::Neumann.TouchControls.RadialPresenterItem(); }
        private object Activate_51_RangeSlider() { return new global::Neumann.TouchControls.RangeSlider(); }
        private object Activate_52_Spinner() { return new global::Neumann.TouchControls.Spinner(); }
        private void VectorAdd_9_ColumnViewSectionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.ColumnViewSection>)instance;
            var newItem = (global::Neumann.TouchControls.ColumnViewSection)item;
            collection.Add(newItem);
        }
        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.ColumnViewSection>)instance;
            var newItem = (global::Neumann.TouchControls.ColumnViewSection)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_FanCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.FanControl>)instance;
            var newItem = (global::Neumann.TouchControls.FanControl)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.FanControl>)instance;
            var newItem = (global::Neumann.TouchControls.FanControl)item;
            collection.Add(newItem);
        }
        private void VectorAdd_27_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.FanControl>)instance;
            var newItem = (global::Neumann.TouchControls.FanControl)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_RadialMenuItemCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.RadialMenuItem>)instance;
            var newItem = (global::Neumann.TouchControls.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.RadialMenuItem>)instance;
            var newItem = (global::Neumann.TouchControls.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_TopicCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.Topic>)instance;
            var newItem = (global::Neumann.TouchControls.Topic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.Topic>)instance;
            var newItem = (global::Neumann.TouchControls.Topic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_45_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Neumann.TouchControls.Topic>)instance;
            var newItem = (global::Neumann.TouchControls.Topic)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Neumann.TouchControls.Arc
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_Arc;
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("Radius");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Double
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Neumann.TouchControls.BreadcrumbBullet
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_BreadcrumbBullet;
                userType.AddMemberName("IsActive");
                userType.AddMemberName("Index");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Boolean
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Int32
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Neumann.TouchControls.BreadcrumbBulletBar
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_7_BreadcrumbBulletBar;
                userType.AddMemberName("BulletCount");
                userType.AddMemberName("SelectedIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Neumann.TouchControls.ColumnView
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_8_ColumnView;
                userType.SetContentPropertyName("Neumann.TouchControls.ColumnView.Sections");
                userType.AddMemberName("Sections");
                userType.AddMemberName("CurrentSection");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("VisibleSectionCount");
                userType.AddMemberName("NormalizeColumnWidth");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Neumann.TouchControls.ColumnViewSectionCollection
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.ColumnViewSection>"));
                userType.CollectionAdd = VectorAdd_9_ColumnViewSectionCollection;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.ColumnViewSection>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case 11:   //  Object
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Neumann.TouchControls.ColumnViewSection
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Neumann.TouchControls.HeaderedContentControl"));
                userType.Activator = Activate_12_ColumnViewSection;
                userType.AddMemberName("IsExpanded");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Neumann.TouchControls.HeaderedContentControl
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_13_HeaderedContentControl;
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Neumann.TouchControls.FanControl
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_16_FanControl;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("Radius");
                userType.AddMemberName("Command");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("IsRotatingContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Style
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  System.Windows.Input.ICommand
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Neumann.TouchControls.DisplayMode
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Quarter", global::Neumann.TouchControls.DisplayMode.Quarter);
                userType.AddEnumValue("Half", global::Neumann.TouchControls.DisplayMode.Half);
                userType.AddEnumValue("Horseshoe", global::Neumann.TouchControls.DisplayMode.Horseshoe);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  System.Enum
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 21:   //  System.ValueType
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 22:   //  Neumann.TouchControls.PieSlice
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Shapes.Path"));
                userType.Activator = Activate_22_PieSlice;
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("Radius");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.Shapes.Path
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Neumann.TouchControls.FanSelector
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_24_FanSelector;
                userType.AddMemberName("Fans");
                userType.AddMemberName("ButtonStyle");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("IsRotatingContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Neumann.TouchControls.FanCollection
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.FanControl>"));
                userType.CollectionAdd = VectorAdd_25_FanCollection;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.FanControl>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.FanControl>"));
                userType.Activator = Activate_26_ObservableCollection;
                userType.CollectionAdd = VectorAdd_26_ObservableCollection;
                xamlType = userType;
                break;

            case 27:   //  System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.FanControl>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_Collection;
                userType.CollectionAdd = VectorAdd_27_Collection;
                xamlType = userType;
                break;

            case 28:   //  Neumann.TouchControls.NumberPad
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_28_NumberPad;
                userType.AddMemberName("SubText");
                userType.AddMemberName("SubTextTemplate");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("PointerOverBrush");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  String
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Color
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 31:   //  Byte
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Neumann.TouchControls.RadialImageButton
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_32_RadialImageButton;
                userType.AddMemberName("ImageSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Neumann.TouchControls.RadialMenu
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_34_RadialMenu;
                userType.SetContentPropertyName("Neumann.TouchControls.RadialMenu.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("IsExpanded");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Neumann.TouchControls.RadialMenuItemCollection
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.RadialMenuItem>"));
                userType.CollectionAdd = VectorAdd_35_RadialMenuItemCollection;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.RadialMenuItem>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_Collection;
                userType.CollectionAdd = VectorAdd_36_Collection;
                xamlType = userType;
                break;

            case 37:   //  Neumann.TouchControls.RadialMenuItem
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_37_RadialMenuItem;
                userType.SetContentPropertyName("Neumann.TouchControls.RadialMenuItem.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("Header");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("Position");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("ShowFocusIndicator");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Neumann.TouchControls.RadialMenuExtensionButton
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_38_RadialMenuExtensionButton;
                userType.AddMemberName("Position");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("MarkerAngle");
                userType.AddMemberName("MenuItem");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Neumann.TouchControls.RadialPicker
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_39_RadialPicker;
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Value");
                userType.AddMemberName("Distance");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("AcceptOnlyStepValues");
                userType.AddMemberName("OpenWhenLoaded");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Neumann.TouchControls.RadialPresenter
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_40_RadialPresenter;
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("ItemHierarchy");
                userType.AddMemberName("CenterContent");
                userType.AddMemberName("CenterContentTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Neumann.TouchControls.Topic
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_42_Topic;
                userType.AddMemberName("Name");
                userType.AddMemberName("Image");
                userType.AddMemberName("ImagePathResourceName");
                userType.AddMemberName("Children");
                userType.AddMemberName("Parent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Neumann.TouchControls.TopicCollection
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.Topic>"));
                userType.CollectionAdd = VectorAdd_43_TopicCollection;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.ObjectModel.ObservableCollection`1<Neumann.TouchControls.Topic>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.Topic>"));
                userType.Activator = Activate_44_ObservableCollection;
                userType.CollectionAdd = VectorAdd_44_ObservableCollection;
                xamlType = userType;
                break;

            case 45:   //  System.Collections.ObjectModel.Collection`1<Neumann.TouchControls.Topic>
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_Collection;
                userType.CollectionAdd = VectorAdd_45_Collection;
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Neumann.TouchControls.CircleItemsPanel
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_47_CircleItemsPanel;
                userType.AddMemberName("Radius");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Neumann.TouchControls.RadialPresenterItem
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_49_RadialPresenterItem;
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("ImagePathGeometry");
                userType.AddMemberName("ImagePath");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  Windows.UI.Xaml.Media.PathGeometry
                xamlType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Neumann.TouchControls.RangeSlider
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_51_RangeSlider;
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Value1");
                userType.AddMemberName("Value2");
                userType.AddMemberName("Range");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  Neumann.TouchControls.Spinner
                userType = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_52_Spinner;
                userType.AddMemberName("Label");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("SelectionColor");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Arc_StrokeThickness(object instance)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            return that.StrokeThickness;
        }
        private void set_0_Arc_StrokeThickness(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_1_Arc_Stroke(object instance)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            return that.Stroke;
        }
        private void set_1_Arc_Stroke(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_2_Arc_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            return that.StartAngle;
        }
        private void set_2_Arc_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_3_Arc_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            return that.EndAngle;
        }
        private void set_3_Arc_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_4_Arc_Radius(object instance)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            return that.Radius;
        }
        private void set_4_Arc_Radius(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Arc)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_5_BreadcrumbBullet_IsActive(object instance)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBullet)instance;
            return that.IsActive;
        }
        private void set_5_BreadcrumbBullet_IsActive(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBullet)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_6_BreadcrumbBullet_Index(object instance)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBullet)instance;
            return that.Index;
        }
        private void set_6_BreadcrumbBullet_Index(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBullet)instance;
            that.Index = (global::System.Int32)Value;
        }
        private object get_7_BreadcrumbBulletBar_BulletCount(object instance)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBulletBar)instance;
            return that.BulletCount;
        }
        private void set_7_BreadcrumbBulletBar_BulletCount(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBulletBar)instance;
            that.BulletCount = (global::System.Int32)Value;
        }
        private object get_8_BreadcrumbBulletBar_SelectedIndex(object instance)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBulletBar)instance;
            return that.SelectedIndex;
        }
        private void set_8_BreadcrumbBulletBar_SelectedIndex(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.BreadcrumbBulletBar)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_9_ColumnView_Sections(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            return that.Sections;
        }
        private void set_9_ColumnView_Sections(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            that.Sections = (global::Neumann.TouchControls.ColumnViewSectionCollection)Value;
        }
        private object get_10_ColumnViewSection_IsExpanded(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnViewSection)instance;
            return that.IsExpanded;
        }
        private void set_10_ColumnViewSection_IsExpanded(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnViewSection)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_11_HeaderedContentControl_Header(object instance)
        {
            var that = (global::Neumann.TouchControls.HeaderedContentControl)instance;
            return that.Header;
        }
        private void set_11_HeaderedContentControl_Header(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.HeaderedContentControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_12_HeaderedContentControl_HeaderTemplate(object instance)
        {
            var that = (global::Neumann.TouchControls.HeaderedContentControl)instance;
            return that.HeaderTemplate;
        }
        private void set_12_HeaderedContentControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.HeaderedContentControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_13_ColumnView_CurrentSection(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            return that.CurrentSection;
        }
        private void set_13_ColumnView_CurrentSection(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            that.CurrentSection = (global::Neumann.TouchControls.ColumnViewSection)Value;
        }
        private object get_14_ColumnView_SelectedIndex(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            return that.SelectedIndex;
        }
        private void set_14_ColumnView_SelectedIndex(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_15_ColumnView_VisibleSectionCount(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            return that.VisibleSectionCount;
        }
        private void set_15_ColumnView_VisibleSectionCount(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            that.VisibleSectionCount = (global::System.Int32)Value;
        }
        private object get_16_ColumnView_NormalizeColumnWidth(object instance)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            return that.NormalizeColumnWidth;
        }
        private void set_16_ColumnView_NormalizeColumnWidth(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.ColumnView)instance;
            that.NormalizeColumnWidth = (global::System.Boolean)Value;
        }
        private object get_17_FanControl_ContentStyle(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.ContentStyle;
        }
        private void set_17_FanControl_ContentStyle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_18_FanControl_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.StartAngle;
        }
        private void set_18_FanControl_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_19_FanControl_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.EndAngle;
        }
        private void set_19_FanControl_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_20_FanControl_Radius(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.Radius;
        }
        private void set_20_FanControl_Radius(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_21_FanControl_Command(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.Command;
        }
        private void set_21_FanControl_Command(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_22_FanControl_DisplayMode(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.DisplayMode;
        }
        private void set_22_FanControl_DisplayMode(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.DisplayMode = (global::Neumann.TouchControls.DisplayMode)Value;
        }
        private object get_23_FanControl_IsRotatingContent(object instance)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            return that.IsRotatingContent;
        }
        private void set_23_FanControl_IsRotatingContent(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanControl)instance;
            that.IsRotatingContent = (global::System.Boolean)Value;
        }
        private object get_24_PieSlice_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            return that.StartAngle;
        }
        private void set_24_PieSlice_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_25_PieSlice_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            return that.EndAngle;
        }
        private void set_25_PieSlice_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_26_PieSlice_Radius(object instance)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            return that.Radius;
        }
        private void set_26_PieSlice_Radius(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.PieSlice)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_27_FanSelector_Fans(object instance)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            return that.Fans;
        }
        private void set_27_FanSelector_Fans(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            that.Fans = (global::Neumann.TouchControls.FanCollection)Value;
        }
        private object get_28_FanSelector_ButtonStyle(object instance)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            return that.ButtonStyle;
        }
        private void set_28_FanSelector_ButtonStyle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            that.ButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_29_FanSelector_IsOpen(object instance)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            return that.IsOpen;
        }
        private void set_29_FanSelector_IsOpen(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_30_FanSelector_DisplayMode(object instance)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            return that.DisplayMode;
        }
        private void set_30_FanSelector_DisplayMode(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            that.DisplayMode = (global::Neumann.TouchControls.DisplayMode)Value;
        }
        private object get_31_FanSelector_IsRotatingContent(object instance)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            return that.IsRotatingContent;
        }
        private void set_31_FanSelector_IsRotatingContent(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.FanSelector)instance;
            that.IsRotatingContent = (global::System.Boolean)Value;
        }
        private object get_32_NumberPad_SubText(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.SubText;
        }
        private void set_32_NumberPad_SubText(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.SubText = (global::System.String)Value;
        }
        private object get_33_NumberPad_SubTextTemplate(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.SubTextTemplate;
        }
        private void set_33_NumberPad_SubTextTemplate(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.SubTextTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_34_NumberPad_Minimum(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.Minimum;
        }
        private void set_34_NumberPad_Minimum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.Minimum = (global::System.Int32)Value;
        }
        private object get_35_NumberPad_Maximum(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.Maximum;
        }
        private void set_35_NumberPad_Maximum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.Maximum = (global::System.Int32)Value;
        }
        private object get_36_NumberPad_PointerOverBrush(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.PointerOverBrush;
        }
        private void set_36_NumberPad_PointerOverBrush(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.PointerOverBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_37_NumberPad_Value(object instance)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            return that.Value;
        }
        private void set_37_NumberPad_Value(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.NumberPad)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_38_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_38_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_39_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_39_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_40_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_40_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_41_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_41_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_42_RadialImageButton_ImageSource(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialImageButton)instance;
            return that.ImageSource;
        }
        private void set_42_RadialImageButton_ImageSource(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialImageButton)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_43_RadialMenu_Items(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            return that.Items;
        }
        private void set_43_RadialMenu_Items(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            that.Items = (global::Neumann.TouchControls.RadialMenuItemCollection)Value;
        }
        private object get_44_RadialMenuItem_Items(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.Items;
        }
        private void set_44_RadialMenuItem_Items(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.Items = (global::Neumann.TouchControls.RadialMenuItemCollection)Value;
        }
        private object get_45_RadialMenuItem_ImageSource(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.ImageSource;
        }
        private void set_45_RadialMenuItem_ImageSource(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_46_RadialMenuItem_Header(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.Header;
        }
        private void set_46_RadialMenuItem_Header(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_47_RadialMenuItem_HasChildren(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.HasChildren;
        }
        private object get_48_RadialMenuItem_Command(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.Command;
        }
        private void set_48_RadialMenuItem_Command(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_49_RadialMenuItem_CommandParameter(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.CommandParameter;
        }
        private void set_49_RadialMenuItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_50_RadialMenuItem_Position(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.Position;
        }
        private void set_50_RadialMenuItem_Position(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.Position = (global::System.Int32)Value;
        }
        private object get_51_RadialMenuItem_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.StartAngle;
        }
        private void set_51_RadialMenuItem_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_52_RadialMenuItem_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.EndAngle;
        }
        private void set_52_RadialMenuItem_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_53_RadialMenuItem_ShowFocusIndicator(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            return that.ShowFocusIndicator;
        }
        private void set_53_RadialMenuItem_ShowFocusIndicator(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuItem)instance;
            that.ShowFocusIndicator = (global::System.Boolean)Value;
        }
        private object get_54_RadialMenu_ImageSource(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            return that.ImageSource;
        }
        private void set_54_RadialMenu_ImageSource(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_55_RadialMenu_IsOpen(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            return that.IsOpen;
        }
        private void set_55_RadialMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_56_RadialMenu_IsExpanded(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            return that.IsExpanded;
        }
        private void set_56_RadialMenu_IsExpanded(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenu)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_57_RadialMenuExtensionButton_Position(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            return that.Position;
        }
        private void set_57_RadialMenuExtensionButton_Position(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            that.Position = (global::System.Int32)Value;
        }
        private object get_58_RadialMenuExtensionButton_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            return that.StartAngle;
        }
        private void set_58_RadialMenuExtensionButton_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_59_RadialMenuExtensionButton_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            return that.EndAngle;
        }
        private void set_59_RadialMenuExtensionButton_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_60_RadialMenuExtensionButton_MarkerAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            return that.MarkerAngle;
        }
        private void set_60_RadialMenuExtensionButton_MarkerAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            that.MarkerAngle = (global::System.Double)Value;
        }
        private object get_61_RadialMenuExtensionButton_MenuItem(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            return that.MenuItem;
        }
        private void set_61_RadialMenuExtensionButton_MenuItem(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialMenuExtensionButton)instance;
            that.MenuItem = (global::Neumann.TouchControls.RadialMenuItem)Value;
        }
        private object get_62_RadialPicker_Minimum(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.Minimum;
        }
        private void set_62_RadialPicker_Minimum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.Minimum = (global::System.Int32)Value;
        }
        private object get_63_RadialPicker_Maximum(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.Maximum;
        }
        private void set_63_RadialPicker_Maximum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.Maximum = (global::System.Int32)Value;
        }
        private object get_64_RadialPicker_Value(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.Value;
        }
        private void set_64_RadialPicker_Value(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_65_RadialPicker_Distance(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.Distance;
        }
        private void set_65_RadialPicker_Distance(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.Distance = (global::System.Int32)Value;
        }
        private object get_66_RadialPicker_StartAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.StartAngle;
        }
        private void set_66_RadialPicker_StartAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_67_RadialPicker_EndAngle(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.EndAngle;
        }
        private void set_67_RadialPicker_EndAngle(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_68_RadialPicker_AcceptOnlyStepValues(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.AcceptOnlyStepValues;
        }
        private void set_68_RadialPicker_AcceptOnlyStepValues(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.AcceptOnlyStepValues = (global::System.Boolean)Value;
        }
        private object get_69_RadialPicker_OpenWhenLoaded(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            return that.OpenWhenLoaded;
        }
        private void set_69_RadialPicker_OpenWhenLoaded(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPicker)instance;
            that.OpenWhenLoaded = (global::System.Boolean)Value;
        }
        private object get_70_RadialPresenter_StrokeThickness(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.StrokeThickness;
        }
        private void set_70_RadialPresenter_StrokeThickness(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_71_RadialPresenter_ImageSource(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.ImageSource;
        }
        private void set_71_RadialPresenter_ImageSource(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_72_RadialPresenter_IsOpen(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.IsOpen;
        }
        private void set_72_RadialPresenter_IsOpen(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_73_RadialPresenter_SelectedItem(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.SelectedItem;
        }
        private void set_73_RadialPresenter_SelectedItem(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.SelectedItem = (global::Neumann.TouchControls.Topic)Value;
        }
        private object get_74_RadialPresenter_ItemHierarchy(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.ItemHierarchy;
        }
        private void set_74_RadialPresenter_ItemHierarchy(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.ItemHierarchy = (global::Neumann.TouchControls.TopicCollection)Value;
        }
        private object get_75_Topic_Name(object instance)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            return that.Name;
        }
        private void set_75_Topic_Name(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_76_Topic_Image(object instance)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            return that.Image;
        }
        private void set_76_Topic_Image(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            that.Image = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_77_Topic_ImagePathResourceName(object instance)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            return that.ImagePathResourceName;
        }
        private void set_77_Topic_ImagePathResourceName(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            that.ImagePathResourceName = (global::System.String)Value;
        }
        private object get_78_Topic_Children(object instance)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            return that.Children;
        }
        private void set_78_Topic_Children(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            that.Children = (global::Neumann.TouchControls.TopicCollection)Value;
        }
        private object get_79_Topic_Parent(object instance)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            return that.Parent;
        }
        private void set_79_Topic_Parent(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Topic)instance;
            that.Parent = (global::Neumann.TouchControls.Topic)Value;
        }
        private object get_80_RadialPresenter_CenterContent(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.CenterContent;
        }
        private void set_80_RadialPresenter_CenterContent(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.CenterContent = (global::System.Object)Value;
        }
        private object get_81_RadialPresenter_CenterContentTemplate(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            return that.CenterContentTemplate;
        }
        private void set_81_RadialPresenter_CenterContentTemplate(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenter)instance;
            that.CenterContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_82_CircleItemsPanel_Radius(object instance)
        {
            var that = (global::Neumann.TouchControls.CircleItemsPanel)instance;
            return that.Radius;
        }
        private void set_82_CircleItemsPanel_Radius(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.CircleItemsPanel)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_83_RadialPresenterItem_ImageSource(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.ImageSource;
        }
        private void set_83_RadialPresenterItem_ImageSource(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_84_RadialPresenterItem_ImagePathGeometry(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.ImagePathGeometry;
        }
        private void set_84_RadialPresenterItem_ImagePathGeometry(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.ImagePathGeometry = (global::Windows.UI.Xaml.Media.PathGeometry)Value;
        }
        private object get_85_RadialPresenterItem_ImagePath(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.ImagePath;
        }
        private void set_85_RadialPresenterItem_ImagePath(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.ImagePath = (global::System.String)Value;
        }
        private object get_86_RadialPresenterItem_StrokeThickness(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.StrokeThickness;
        }
        private void set_86_RadialPresenterItem_StrokeThickness(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_87_RadialPresenterItem_Command(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.Command;
        }
        private void set_87_RadialPresenterItem_Command(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_88_RadialPresenterItem_CommandParameter(object instance)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            return that.CommandParameter;
        }
        private void set_88_RadialPresenterItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RadialPresenterItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_89_RangeSlider_Minimum(object instance)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            return that.Minimum;
        }
        private void set_89_RangeSlider_Minimum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            that.Minimum = (global::System.Int32)Value;
        }
        private object get_90_RangeSlider_Maximum(object instance)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            return that.Maximum;
        }
        private void set_90_RangeSlider_Maximum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            that.Maximum = (global::System.Int32)Value;
        }
        private object get_91_RangeSlider_Value1(object instance)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            return that.Value1;
        }
        private void set_91_RangeSlider_Value1(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            that.Value1 = (global::System.Int32)Value;
        }
        private object get_92_RangeSlider_Value2(object instance)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            return that.Value2;
        }
        private void set_92_RangeSlider_Value2(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            that.Value2 = (global::System.Int32)Value;
        }
        private object get_93_RangeSlider_Range(object instance)
        {
            var that = (global::Neumann.TouchControls.RangeSlider)instance;
            return that.Range;
        }
        private object get_94_Spinner_Label(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.Label;
        }
        private void set_94_Spinner_Label(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_95_Spinner_LabelTemplate(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.LabelTemplate;
        }
        private void set_95_Spinner_LabelTemplate(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.LabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_96_Spinner_Minimum(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.Minimum;
        }
        private void set_96_Spinner_Minimum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.Minimum = (global::System.Int32)Value;
        }
        private object get_97_Spinner_Maximum(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.Maximum;
        }
        private void set_97_Spinner_Maximum(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.Maximum = (global::System.Int32)Value;
        }
        private object get_98_Spinner_SelectionColor(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.SelectionColor;
        }
        private void set_98_Spinner_SelectionColor(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.SelectionColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_99_Spinner_Value(object instance)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            return that.Value;
        }
        private void set_99_Spinner_Value(object instance, object Value)
        {
            var that = (global::Neumann.TouchControls.Spinner)instance;
            that.Value = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember xamlMember = null;
            global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Neumann.TouchControls.Arc.StrokeThickness":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Arc");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_Arc_StrokeThickness;
                xamlMember.Setter = set_0_Arc_StrokeThickness;
                break;
            case "Neumann.TouchControls.Arc.Stroke":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Arc");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Arc_Stroke;
                xamlMember.Setter = set_1_Arc_Stroke;
                break;
            case "Neumann.TouchControls.Arc.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Arc");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_Arc_StartAngle;
                xamlMember.Setter = set_2_Arc_StartAngle;
                break;
            case "Neumann.TouchControls.Arc.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Arc");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_Arc_EndAngle;
                xamlMember.Setter = set_3_Arc_EndAngle;
                break;
            case "Neumann.TouchControls.Arc.Radius":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Arc");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_Arc_Radius;
                xamlMember.Setter = set_4_Arc_Radius;
                break;
            case "Neumann.TouchControls.BreadcrumbBullet.IsActive":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.BreadcrumbBullet");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_BreadcrumbBullet_IsActive;
                xamlMember.Setter = set_5_BreadcrumbBullet_IsActive;
                break;
            case "Neumann.TouchControls.BreadcrumbBullet.Index":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.BreadcrumbBullet");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_BreadcrumbBullet_Index;
                xamlMember.Setter = set_6_BreadcrumbBullet_Index;
                break;
            case "Neumann.TouchControls.BreadcrumbBulletBar.BulletCount":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.BreadcrumbBulletBar");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "BulletCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_BreadcrumbBulletBar_BulletCount;
                xamlMember.Setter = set_7_BreadcrumbBulletBar_BulletCount;
                break;
            case "Neumann.TouchControls.BreadcrumbBulletBar.SelectedIndex":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.BreadcrumbBulletBar");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_BreadcrumbBulletBar_SelectedIndex;
                xamlMember.Setter = set_8_BreadcrumbBulletBar_SelectedIndex;
                break;
            case "Neumann.TouchControls.ColumnView.Sections":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnView");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Sections", "Neumann.TouchControls.ColumnViewSectionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ColumnView_Sections;
                xamlMember.Setter = set_9_ColumnView_Sections;
                break;
            case "Neumann.TouchControls.ColumnViewSection.IsExpanded":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnViewSection");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ColumnViewSection_IsExpanded;
                xamlMember.Setter = set_10_ColumnViewSection_IsExpanded;
                break;
            case "Neumann.TouchControls.HeaderedContentControl.Header":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.HeaderedContentControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_HeaderedContentControl_Header;
                xamlMember.Setter = set_11_HeaderedContentControl_Header;
                break;
            case "Neumann.TouchControls.HeaderedContentControl.HeaderTemplate":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.HeaderedContentControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_HeaderedContentControl_HeaderTemplate;
                xamlMember.Setter = set_12_HeaderedContentControl_HeaderTemplate;
                break;
            case "Neumann.TouchControls.ColumnView.CurrentSection":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnView");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "CurrentSection", "Neumann.TouchControls.ColumnViewSection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ColumnView_CurrentSection;
                xamlMember.Setter = set_13_ColumnView_CurrentSection;
                break;
            case "Neumann.TouchControls.ColumnView.SelectedIndex":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnView");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ColumnView_SelectedIndex;
                xamlMember.Setter = set_14_ColumnView_SelectedIndex;
                break;
            case "Neumann.TouchControls.ColumnView.VisibleSectionCount":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnView");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "VisibleSectionCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ColumnView_VisibleSectionCount;
                xamlMember.Setter = set_15_ColumnView_VisibleSectionCount;
                break;
            case "Neumann.TouchControls.ColumnView.NormalizeColumnWidth":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.ColumnView");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "NormalizeColumnWidth", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ColumnView_NormalizeColumnWidth;
                xamlMember.Setter = set_16_ColumnView_NormalizeColumnWidth;
                break;
            case "Neumann.TouchControls.FanControl.ContentStyle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_FanControl_ContentStyle;
                xamlMember.Setter = set_17_FanControl_ContentStyle;
                break;
            case "Neumann.TouchControls.FanControl.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_FanControl_StartAngle;
                xamlMember.Setter = set_18_FanControl_StartAngle;
                break;
            case "Neumann.TouchControls.FanControl.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_FanControl_EndAngle;
                xamlMember.Setter = set_19_FanControl_EndAngle;
                break;
            case "Neumann.TouchControls.FanControl.Radius":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_FanControl_Radius;
                xamlMember.Setter = set_20_FanControl_Radius;
                break;
            case "Neumann.TouchControls.FanControl.Command":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_FanControl_Command;
                xamlMember.Setter = set_21_FanControl_Command;
                break;
            case "Neumann.TouchControls.FanControl.DisplayMode":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "DisplayMode", "Neumann.TouchControls.DisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_FanControl_DisplayMode;
                xamlMember.Setter = set_22_FanControl_DisplayMode;
                break;
            case "Neumann.TouchControls.FanControl.IsRotatingContent":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanControl");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsRotatingContent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_FanControl_IsRotatingContent;
                xamlMember.Setter = set_23_FanControl_IsRotatingContent;
                break;
            case "Neumann.TouchControls.PieSlice.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.PieSlice");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_PieSlice_StartAngle;
                xamlMember.Setter = set_24_PieSlice_StartAngle;
                break;
            case "Neumann.TouchControls.PieSlice.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.PieSlice");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_PieSlice_EndAngle;
                xamlMember.Setter = set_25_PieSlice_EndAngle;
                break;
            case "Neumann.TouchControls.PieSlice.Radius":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.PieSlice");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_PieSlice_Radius;
                xamlMember.Setter = set_26_PieSlice_Radius;
                break;
            case "Neumann.TouchControls.FanSelector.Fans":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanSelector");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Fans", "Neumann.TouchControls.FanCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_FanSelector_Fans;
                xamlMember.Setter = set_27_FanSelector_Fans;
                break;
            case "Neumann.TouchControls.FanSelector.ButtonStyle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanSelector");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_FanSelector_ButtonStyle;
                xamlMember.Setter = set_28_FanSelector_ButtonStyle;
                break;
            case "Neumann.TouchControls.FanSelector.IsOpen":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanSelector");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_FanSelector_IsOpen;
                xamlMember.Setter = set_29_FanSelector_IsOpen;
                break;
            case "Neumann.TouchControls.FanSelector.DisplayMode":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanSelector");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "DisplayMode", "Neumann.TouchControls.DisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_FanSelector_DisplayMode;
                xamlMember.Setter = set_30_FanSelector_DisplayMode;
                break;
            case "Neumann.TouchControls.FanSelector.IsRotatingContent":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.FanSelector");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsRotatingContent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_FanSelector_IsRotatingContent;
                xamlMember.Setter = set_31_FanSelector_IsRotatingContent;
                break;
            case "Neumann.TouchControls.NumberPad.SubText":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SubText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_NumberPad_SubText;
                xamlMember.Setter = set_32_NumberPad_SubText;
                break;
            case "Neumann.TouchControls.NumberPad.SubTextTemplate":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SubTextTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_NumberPad_SubTextTemplate;
                xamlMember.Setter = set_33_NumberPad_SubTextTemplate;
                break;
            case "Neumann.TouchControls.NumberPad.Minimum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Minimum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_NumberPad_Minimum;
                xamlMember.Setter = set_34_NumberPad_Minimum;
                break;
            case "Neumann.TouchControls.NumberPad.Maximum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Maximum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_NumberPad_Maximum;
                xamlMember.Setter = set_35_NumberPad_Maximum;
                break;
            case "Neumann.TouchControls.NumberPad.PointerOverBrush":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "PointerOverBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_NumberPad_PointerOverBrush;
                xamlMember.Setter = set_36_NumberPad_PointerOverBrush;
                break;
            case "Neumann.TouchControls.NumberPad.Value":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.NumberPad");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_NumberPad_Value;
                xamlMember.Setter = set_37_NumberPad_Value;
                break;
            case "Windows.UI.Color.A":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_38_Color_A;
                xamlMember.Setter = set_38_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_39_Color_B;
                xamlMember.Setter = set_39_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_40_Color_G;
                xamlMember.Setter = set_40_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_41_Color_R;
                xamlMember.Setter = set_41_Color_R;
                break;
            case "Neumann.TouchControls.RadialImageButton.ImageSource":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialImageButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_RadialImageButton_ImageSource;
                xamlMember.Setter = set_42_RadialImageButton_ImageSource;
                break;
            case "Neumann.TouchControls.RadialMenu.Items":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenu");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Items", "Neumann.TouchControls.RadialMenuItemCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_RadialMenu_Items;
                xamlMember.Setter = set_43_RadialMenu_Items;
                break;
            case "Neumann.TouchControls.RadialMenuItem.Items":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Items", "Neumann.TouchControls.RadialMenuItemCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_RadialMenuItem_Items;
                xamlMember.Setter = set_44_RadialMenuItem_Items;
                break;
            case "Neumann.TouchControls.RadialMenuItem.ImageSource":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_RadialMenuItem_ImageSource;
                xamlMember.Setter = set_45_RadialMenuItem_ImageSource;
                break;
            case "Neumann.TouchControls.RadialMenuItem.Header":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_RadialMenuItem_Header;
                xamlMember.Setter = set_46_RadialMenuItem_Header;
                break;
            case "Neumann.TouchControls.RadialMenuItem.HasChildren":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.Getter = get_47_RadialMenuItem_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Neumann.TouchControls.RadialMenuItem.Command":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_RadialMenuItem_Command;
                xamlMember.Setter = set_48_RadialMenuItem_Command;
                break;
            case "Neumann.TouchControls.RadialMenuItem.CommandParameter":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_RadialMenuItem_CommandParameter;
                xamlMember.Setter = set_49_RadialMenuItem_CommandParameter;
                break;
            case "Neumann.TouchControls.RadialMenuItem.Position":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Position", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_RadialMenuItem_Position;
                xamlMember.Setter = set_50_RadialMenuItem_Position;
                break;
            case "Neumann.TouchControls.RadialMenuItem.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_RadialMenuItem_StartAngle;
                xamlMember.Setter = set_51_RadialMenuItem_StartAngle;
                break;
            case "Neumann.TouchControls.RadialMenuItem.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_RadialMenuItem_EndAngle;
                xamlMember.Setter = set_52_RadialMenuItem_EndAngle;
                break;
            case "Neumann.TouchControls.RadialMenuItem.ShowFocusIndicator":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ShowFocusIndicator", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_RadialMenuItem_ShowFocusIndicator;
                xamlMember.Setter = set_53_RadialMenuItem_ShowFocusIndicator;
                break;
            case "Neumann.TouchControls.RadialMenu.ImageSource":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenu");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RadialMenu_ImageSource;
                xamlMember.Setter = set_54_RadialMenu_ImageSource;
                break;
            case "Neumann.TouchControls.RadialMenu.IsOpen":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenu");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_RadialMenu_IsOpen;
                xamlMember.Setter = set_55_RadialMenu_IsOpen;
                break;
            case "Neumann.TouchControls.RadialMenu.IsExpanded":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenu");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_RadialMenu_IsExpanded;
                xamlMember.Setter = set_56_RadialMenu_IsExpanded;
                break;
            case "Neumann.TouchControls.RadialMenuExtensionButton.Position":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuExtensionButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Position", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_RadialMenuExtensionButton_Position;
                xamlMember.Setter = set_57_RadialMenuExtensionButton_Position;
                break;
            case "Neumann.TouchControls.RadialMenuExtensionButton.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuExtensionButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_RadialMenuExtensionButton_StartAngle;
                xamlMember.Setter = set_58_RadialMenuExtensionButton_StartAngle;
                break;
            case "Neumann.TouchControls.RadialMenuExtensionButton.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuExtensionButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_RadialMenuExtensionButton_EndAngle;
                xamlMember.Setter = set_59_RadialMenuExtensionButton_EndAngle;
                break;
            case "Neumann.TouchControls.RadialMenuExtensionButton.MarkerAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuExtensionButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "MarkerAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_RadialMenuExtensionButton_MarkerAngle;
                xamlMember.Setter = set_60_RadialMenuExtensionButton_MarkerAngle;
                break;
            case "Neumann.TouchControls.RadialMenuExtensionButton.MenuItem":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialMenuExtensionButton");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "MenuItem", "Neumann.TouchControls.RadialMenuItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_RadialMenuExtensionButton_MenuItem;
                xamlMember.Setter = set_61_RadialMenuExtensionButton_MenuItem;
                break;
            case "Neumann.TouchControls.RadialPicker.Minimum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Minimum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_RadialPicker_Minimum;
                xamlMember.Setter = set_62_RadialPicker_Minimum;
                break;
            case "Neumann.TouchControls.RadialPicker.Maximum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Maximum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_RadialPicker_Maximum;
                xamlMember.Setter = set_63_RadialPicker_Maximum;
                break;
            case "Neumann.TouchControls.RadialPicker.Value":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_RadialPicker_Value;
                xamlMember.Setter = set_64_RadialPicker_Value;
                break;
            case "Neumann.TouchControls.RadialPicker.Distance":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Distance", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_RadialPicker_Distance;
                xamlMember.Setter = set_65_RadialPicker_Distance;
                break;
            case "Neumann.TouchControls.RadialPicker.StartAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_RadialPicker_StartAngle;
                xamlMember.Setter = set_66_RadialPicker_StartAngle;
                break;
            case "Neumann.TouchControls.RadialPicker.EndAngle":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_RadialPicker_EndAngle;
                xamlMember.Setter = set_67_RadialPicker_EndAngle;
                break;
            case "Neumann.TouchControls.RadialPicker.AcceptOnlyStepValues":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "AcceptOnlyStepValues", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_RadialPicker_AcceptOnlyStepValues;
                xamlMember.Setter = set_68_RadialPicker_AcceptOnlyStepValues;
                break;
            case "Neumann.TouchControls.RadialPicker.OpenWhenLoaded":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPicker");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "OpenWhenLoaded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_RadialPicker_OpenWhenLoaded;
                xamlMember.Setter = set_69_RadialPicker_OpenWhenLoaded;
                break;
            case "Neumann.TouchControls.RadialPresenter.StrokeThickness":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_RadialPresenter_StrokeThickness;
                xamlMember.Setter = set_70_RadialPresenter_StrokeThickness;
                break;
            case "Neumann.TouchControls.RadialPresenter.ImageSource":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_RadialPresenter_ImageSource;
                xamlMember.Setter = set_71_RadialPresenter_ImageSource;
                break;
            case "Neumann.TouchControls.RadialPresenter.IsOpen":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_RadialPresenter_IsOpen;
                xamlMember.Setter = set_72_RadialPresenter_IsOpen;
                break;
            case "Neumann.TouchControls.RadialPresenter.SelectedItem":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SelectedItem", "Neumann.TouchControls.Topic");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_RadialPresenter_SelectedItem;
                xamlMember.Setter = set_73_RadialPresenter_SelectedItem;
                break;
            case "Neumann.TouchControls.RadialPresenter.ItemHierarchy":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ItemHierarchy", "Neumann.TouchControls.TopicCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_RadialPresenter_ItemHierarchy;
                xamlMember.Setter = set_74_RadialPresenter_ItemHierarchy;
                break;
            case "Neumann.TouchControls.Topic.Name":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Topic");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_75_Topic_Name;
                xamlMember.Setter = set_75_Topic_Name;
                break;
            case "Neumann.TouchControls.Topic.Image":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Topic");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Image", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_76_Topic_Image;
                xamlMember.Setter = set_76_Topic_Image;
                break;
            case "Neumann.TouchControls.Topic.ImagePathResourceName":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Topic");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImagePathResourceName", "String");
                xamlMember.Getter = get_77_Topic_ImagePathResourceName;
                xamlMember.Setter = set_77_Topic_ImagePathResourceName;
                break;
            case "Neumann.TouchControls.Topic.Children":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Topic");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Children", "Neumann.TouchControls.TopicCollection");
                xamlMember.Getter = get_78_Topic_Children;
                xamlMember.Setter = set_78_Topic_Children;
                break;
            case "Neumann.TouchControls.Topic.Parent":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Topic");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Parent", "Neumann.TouchControls.Topic");
                xamlMember.Getter = get_79_Topic_Parent;
                xamlMember.Setter = set_79_Topic_Parent;
                break;
            case "Neumann.TouchControls.RadialPresenter.CenterContent":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "CenterContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_RadialPresenter_CenterContent;
                xamlMember.Setter = set_80_RadialPresenter_CenterContent;
                break;
            case "Neumann.TouchControls.RadialPresenter.CenterContentTemplate":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenter");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "CenterContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_RadialPresenter_CenterContentTemplate;
                xamlMember.Setter = set_81_RadialPresenter_CenterContentTemplate;
                break;
            case "Neumann.TouchControls.CircleItemsPanel.Radius":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.CircleItemsPanel");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_CircleItemsPanel_Radius;
                xamlMember.Setter = set_82_CircleItemsPanel_Radius;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.ImageSource":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_RadialPresenterItem_ImageSource;
                xamlMember.Setter = set_83_RadialPresenterItem_ImageSource;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.ImagePathGeometry":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImagePathGeometry", "Windows.UI.Xaml.Media.PathGeometry");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_RadialPresenterItem_ImagePathGeometry;
                xamlMember.Setter = set_84_RadialPresenterItem_ImagePathGeometry;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.ImagePath":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "ImagePath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_RadialPresenterItem_ImagePath;
                xamlMember.Setter = set_85_RadialPresenterItem_ImagePath;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.StrokeThickness":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_RadialPresenterItem_StrokeThickness;
                xamlMember.Setter = set_86_RadialPresenterItem_StrokeThickness;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.Command":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_RadialPresenterItem_Command;
                xamlMember.Setter = set_87_RadialPresenterItem_Command;
                break;
            case "Neumann.TouchControls.RadialPresenterItem.CommandParameter":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RadialPresenterItem");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_RadialPresenterItem_CommandParameter;
                xamlMember.Setter = set_88_RadialPresenterItem_CommandParameter;
                break;
            case "Neumann.TouchControls.RangeSlider.Minimum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RangeSlider");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Minimum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_RangeSlider_Minimum;
                xamlMember.Setter = set_89_RangeSlider_Minimum;
                break;
            case "Neumann.TouchControls.RangeSlider.Maximum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RangeSlider");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Maximum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_RangeSlider_Maximum;
                xamlMember.Setter = set_90_RangeSlider_Maximum;
                break;
            case "Neumann.TouchControls.RangeSlider.Value1":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RangeSlider");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Value1", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_RangeSlider_Value1;
                xamlMember.Setter = set_91_RangeSlider_Value1;
                break;
            case "Neumann.TouchControls.RangeSlider.Value2":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RangeSlider");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Value2", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_RangeSlider_Value2;
                xamlMember.Setter = set_92_RangeSlider_Value2;
                break;
            case "Neumann.TouchControls.RangeSlider.Range":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.RangeSlider");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Range", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_RangeSlider_Range;
                xamlMember.SetIsReadOnly();
                break;
            case "Neumann.TouchControls.Spinner.Label":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_Spinner_Label;
                xamlMember.Setter = set_94_Spinner_Label;
                break;
            case "Neumann.TouchControls.Spinner.LabelTemplate":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_Spinner_LabelTemplate;
                xamlMember.Setter = set_95_Spinner_LabelTemplate;
                break;
            case "Neumann.TouchControls.Spinner.Minimum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Minimum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_Spinner_Minimum;
                xamlMember.Setter = set_96_Spinner_Minimum;
                break;
            case "Neumann.TouchControls.Spinner.Maximum":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Maximum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_Spinner_Maximum;
                xamlMember.Setter = set_97_Spinner_Maximum;
                break;
            case "Neumann.TouchControls.Spinner.SelectionColor":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "SelectionColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_Spinner_SelectionColor;
                xamlMember.Setter = set_98_Spinner_SelectionColor;
                break;
            case "Neumann.TouchControls.Spinner.Value":
                userType = (global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Neumann.TouchControls.Spinner");
                xamlMember = new global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Spinner_Value;
                xamlMember.Setter = set_99_Spinner_Value;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlSystemBaseType
    {
        global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Neumann.TouchControls.Neumann_TouchControls_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

